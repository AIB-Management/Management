<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gdaib.mapper.UsersMapper">

    <!--AccountInfo的动态sql-->
    <sql id="AccountInfo_s">
        <!-- 判断语句,如果id里面没值就不添加id-->
        <if test="id != null and id != ''">
            and `t_account`.id = #{id}
        </if>
        <if test="uid != null and uid != ''">
            and `t_account`.uid = #{uid}
        </if>
        <if test="username != null and username != ''">
            and `t_account`.username = #{username}
        </if>
        <if test="name != null and name != ''">
            and `t_account`.name = #{name}
        </if>
        <if test="mail != null and mail != ''">
            and `t_account`.mail = #{mail}
        </if>
        <if test="role != null and role != ''">
            and `t_account`.role = #{role}
        </if>
        <if test="departmentId != null and departmentId != ''">
            and `t_department`.`parent` = #{departmentId}
        </if>
        <if test="depContent != null and depContent != ''">
            and depContent = #{depContent}
        </if>
        <if test="professionId != null and professionId != ''">
            and professionId = #{professionId}
        </if>
        <if test="content != null and content != ''">
            and content = #{content}
        </if>
    </sql>


    <!--根据用户名找到用户-->
    <select id="selectByUsername" parameterType="string" resultType="account">
        SELECT * FROM `t_account` WHERE username = #{account}
    </select>


    <!--帐号是否存在-->
    <select id="findUsernameIsExists" parameterType="string" resultType="int">
        SELECT COUNT(*) FROM `t_account` WHERE username = #{account}
    </select>

    <!--插入用户信息-->
    <select id="insertUserFromAccount" parameterType="RegisterPojo">
        INSERT INTO `t_account`(uid,username,PASSWORD,name,mail,depUid) VALUES(#{uid},#{username},#{pwd},#{name},#{email},#{depUid})
    </select>

    <!--得到所有系-->
    <select id="findDepartment" resultType="Department">
        SELECT id,department FROM `t_department` WHERE id != 1
    </select>


    <!--根据系id找到相应的专业-->
    <select id="findProfessionById" parameterType="int" resultType="Profession">
        SELECT id,department_id,profession FROM `t_profession` WHERE department_id = #{id}
    </select>


    <!--帐号是否存在-->
    <select id="findEmailIsExists" parameterType="string" resultType="int">
        SELECT COUNT(*) FROM `t_account` WHERE mail = #{account}
    </select>

    <!--帐号和邮箱是否存在-->
    <select id="findEmailAndUsernameIsExists" parameterType="Account" resultType="int">
        SELECT COUNT(*) FROM `t_account` WHERE mail = #{mail} and username = #{username}
    </select>

    <!--更改修改时间和UUID-->
    <update id="updateCodeAndDate" parameterType="Account">
        UPDATE `t_account` SET
        <if test="validatacode != null and outdate != null">
            validataCode = #{validatacode},outDate=#{outdate}
        </if>
        <if test="validatacode != null and outdate == null">
            validataCode = #{validatacode}
        </if>
        WHERE username = #{username}
    </update>

    <!--得到用户的超时时间-->
    <select id="findOutDateByAccount" parameterType="String" resultType="date">
        SELECT outDate FROM `t_account` WHERE username = #{username}
    </select>

    <!--修改密码-->
    <update id="updatePassword" parameterType="Account">
        UPDATE `t_account` SET password = #{password}WHERE username = #{username}
    </update>

    <select id="findAccountInfoByUsername" parameterType="String" resultType="AccountInfo">
        SELECT * FROM `v_account_info` WHERE username = #{username}
    </select>

    <select id="findAccountInfoByCharacter" parameterType="String" resultType="AccountInfo">
        SELECT
          v_account_info.id,
          v_account_info.username,
          v_account_info.profession,
          v_account_info.department,
          v_account_info.`character`
        FROM
          v_account_info
        WHERE
          v_account_info.`character` = #{character}
    </select>

    <!--找到该系的所有教师-->
    <select id="findUsernameByDeparentId" parameterType="Map" resultType="com.gdaib.pojo.AccountInfo">
        SELECT a.uid,a.name FROM `t_account` a WHERE a.`depUid` IN(SELECT uid FROM `t_department` WHERE parent = #{department_id}) AND a.role = 'teacher'
        <if test="accounts != null and accounts.size() != 0">
            <foreach collection="accounts" item="account" open="and uid not in(" close=")" separator=",">
                #{account.uid}
            </foreach>
        </if>
    </select>

    <!--得到用户被别人授权的身份-->
    <select id="findBeAccountName" parameterType="String" resultType="com.gdaib.pojo.AccountInfo">
        SELECT a.uid,a.name FROM `t_account` a,`t_authorization` u WHERE a.`uid` = u.`accUid` AND u.`beAccUid` =  #{be_acco}
    </select>

    <!--得到用户授权给别人的身份-->
    <select id="findAccountName" parameterType="String" resultType="com.gdaib.pojo.AccountInfo">
        SELECT a.uid,a.name FROM `t_account` a,`t_authorization` u WHERE a.`uid` = u.`beAccUid` AND u.`accUid` = #{account}
    </select>



    <!--AccountInfo-->
    <select id="findAccountInfo" parameterType="com.gdaib.pojo.AccountInfo" resultType="com.gdaib.pojo.AccountInfo">
        SELECT
        `t_account`.`id`         AS `id`,
        `t_account`.`uid`         AS `uid`,
        `t_account`.`username`   AS `username`,
        `t_account`.`name`       AS `name`,
        `t_account`.`mail`       AS `mail`,
        `t_account`.`role`       AS `role`,
        `t_department`.`parent`  AS `departmentId`,
        (SELECT
        department.`content`
        FROM `t_department` department
        WHERE (department.`uid` = `t_department`.`parent`)) AS `depContent`,
        `t_department`.`uid`     AS `professionId`,
        `t_department`.`content` AS `content`
        FROM (`t_account`
        JOIN `t_department`
        ON ((`t_account`.`depUid` = `t_department`.`uid`)))
        <where>
            <include refid="AccountInfo_s"/>
        </where>
        GROUP BY id DESC

    </select>

    <!--批量查找 AccountInfo-->
    <select id="findBatchAccountInfo" parameterType="Map" resultType="com.gdaib.pojo.AccountInfo">
        SELECT
        `t_account`.`id`         AS `id`,
        `t_account`.`uid`         AS `uid`,
        `t_account`.`username`   AS `username`,
        `t_account`.`name`       AS `name`,
        `t_account`.`mail`       AS `mail`,
        `t_account`.`role`       AS `role`,
        `t_department`.`parent`  AS `departmentId`,
        (SELECT
        department.`content`
        FROM `t_department` department
        WHERE (department.`uid` = `t_department`.`parent`)) AS `depContent`,
        `t_department`.`uid`     AS `professionId`,
        `t_department`.`content` AS `content`
        FROM (`t_account`
        JOIN `t_department`
        ON ((`t_account`.`depUid` = `t_department`.`uid`)))
        <foreach collection="accounts" item="account" open="where `t_account`.`uid` in(" close=")" separator=",">
            #{account}
        </foreach>
        GROUP BY id DESC

    </select>



</mapper>